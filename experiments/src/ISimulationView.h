#pragma once

#include "SimulationState.h"
#include <memory>
#include <vector>

/**
 * ISimulationView - Abstract interface for simulation UI
 *
 * Defines the contract that any UI implementation must fulfill.
 * This allows the simulation to be completely UI-framework agnostic.
 *
 * Implementations:
 * - ImGuiSimulationView (current - using Dear ImGui)
 * - Future: SwiftUISimulationView, AppKitSimulationView, QtView, etc.
 *
 * Responsibilities:
 * - Render UI elements (controls, overlays, markers)
 * - Capture user input and convert to UICommands
 * - Display simulation state to user
 *
 * Does NOT:
 * - Modify simulation state directly
 * - Handle application logic
 * - Manage window/OpenGL context
 */
class ISimulationView {
public:
    virtual ~ISimulationView() = default;

    /**
     * Initialize the view
     *
     * Called once during application startup after OpenGL context is created.
     * Use this to initialize UI framework resources.
     *
     * @return true if initialization succeeded, false otherwise
     */
    virtual bool initialize() = 0;

    /**
     * Shutdown the view
     *
     * Called once during application shutdown before OpenGL context is destroyed.
     * Use this to clean up UI framework resources.
     */
    virtual void shutdown() = 0;

    /**
     * Begin frame
     *
     * Called at the start of each frame before render().
     * Use this for framework-specific per-frame setup (e.g., ImGui::NewFrame()).
     */
    virtual void beginFrame() = 0;

    /**
     * Render the UI
     *
     * Called each frame to render all UI elements.
     * Should read from state to display current simulation status.
     *
     * @param state Current simulation state (read-only)
     * @return Vector of commands generated by user interaction this frame
     */
    virtual std::vector<std::unique_ptr<UICommand>> render(const SimulationState& state) = 0;

    /**
     * End frame
     *
     * Called at the end of each frame after render().
     * Use this for framework-specific per-frame teardown (e.g., ImGui::Render()).
     */
    virtual void endFrame() = 0;

    /**
     * Handle window resize
     *
     * Called when the window is resized.
     *
     * @param width New window width in pixels
     * @param height New window height in pixels
     */
    virtual void onWindowResize(int width, int height) = 0;

    /**
     * Get view name
     *
     * Returns a human-readable name for this view implementation.
     * Useful for debugging and logging.
     *
     * @return View name (e.g., "ImGui", "SwiftUI", "AppKit")
     */
    virtual const char* getViewName() const = 0;
};

/**
 * Helper function to create the default view
 *
 * This factory function creates the appropriate view implementation.
 * Currently returns ImGuiSimulationView, but can be extended to:
 * - Detect platform and return native view (AppKit on macOS, etc.)
 * - Read config file to choose view
 * - Accept command-line argument to select view
 *
 * @return Pointer to newly created view (caller owns)
 */
std::unique_ptr<ISimulationView> createDefaultView();
